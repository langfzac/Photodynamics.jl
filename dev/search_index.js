var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/#Photodynamics.compute_lightcurve!","page":"API","title":"Photodynamics.compute_lightcurve!","text":"compute_lightcurve!(lc, ts; tol=1e-6, maxdepth=6, body_index=0)\n\nCompute a light curve from N-body results (TransitSeries) and a specified set of transit parameters (AbstractLightcurve).\n\nArguments\n\nlc::AbstractLightcurve{T} : Lightcurve object\nts::TransitSeries{T, TT} : Transit series object\n\nOptional\n\ntol::T=1e-6 : Tolerance of the Simpsons integration.\nmaxdepth::Int64=6 : maximum depth for the Simpsons integration.\nbody_index::Int64=0 : If non-zero, this picks out a particular planet and only computes the transits of that planet.\n\n\n\n\n\n","category":"function"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/#TransitSeries","page":"API","title":"TransitSeries","text":"","category":"section"},{"location":"api/#Photodynamics.TransitSeries","page":"API","title":"Photodynamics.TransitSeries","text":"TransitSeries{T<:Real, TT<:AbstractTransitTimes}\n\nTransit times, PK20 expansion points about each transit, and derivatives.\n\nFields (relevant to the user)\n\ntimes::Vector{T} : Transit times for all bodies, in chronological order [days]\nbodies::Vector{T} : The body index which transited at a given transit time in times. \npoints::Array{T, 4} : Expansion points around each transit [body, transit, 7, 2]\npoints::Array{T, 6} : Derivatives of the expansion points around each transit [body, transit, 7, 2, body, parameter]\n\n\n\n\n\n","category":"type"},{"location":"api/#Integrator","page":"API","title":"Integrator","text":"","category":"section"},{"location":"api/#NbodyGradient.Integrator","page":"API","title":"NbodyGradient.Integrator","text":"(intr::Integrator)(s, ts, d=nothing; grad=false)\n\nCarry out N-body integration and compute 7 points about each transit time. Expects transit times have been pre-computed.\n\nArguments\n\ns::State{T} : N-body problem state.\nts::TransitSeries{T, ProvidedTimes} : Transit series which has pre-computed transit times\n\nOptional\n\nd::Union{Derivatives, Nothing}=nothing : Allows the user to provide a pre-allocated Derivatives type. If nothing, it will be allocated inside the function.\n\nKeyword Args\n\ngrad::Bool=false : Whether to compute derivatives. Default is no derivatives (false).\n\n\n\n\n\n(intr::Integrator)(s, ts, d=nothing; grad=false)\n\nCarry out N-body integration, compute transit times, and compute 7 points about each transit time.\n\nArguments\n\ns::State{T} : N-body problem state.\nts::TransitSeries{T, ComputedTimes} : Transit series which will hold the computed transit times and expansion points.\ntt::TransitOutput{T} : Transit timing from NbodyGradient.jl. Holds transit times and derivatives.\n\nOptional\n\nd::Union{Derivatives, Nothing}=nothing : Allows the user to provide a pre-allocated Derivatives type. If nothing, it will be allocated inside the function.\n\nKeyword Args\n\ngrad::Bool=false : Whether to compute derivatives. Default is no derivatives (false).\n\n\n\n\n\n","category":"type"},{"location":"api/#Lightcurve","page":"API","title":"Lightcurve","text":"","category":"section"},{"location":"api/#Photodynamics.Lightcurve","page":"API","title":"Photodynamics.Lightcurve","text":"Lightcurve{T<:Real} <: AbstractLightcurve{T}\n\nA simulated lightcurve.\n\nConstructor\n\nLightcurve(dt, tobs, fobs, eobs, u_n, k, rstar)\n\nArguments\n\ndt::T : Exposure time [days].\ntobs::Vector{T} : Time of observations [days].\nfobs::Vector{T} : Relative flux observations.\neobs::Vector{T} : Uncertainity on relative flux observations.\nu_n::Vector{T} : Stellar limbdarkening coefficients.\nk::Vector{T} : Planet-Star radius ratios.\nrstar::T : Stellar radius [AU] \n\nFields (relevant to the user)\n\nLightcurve parameters\n\ndt::T : Exposure time [days].\ntobs::Vector{T} : Time of observations [days].\nfobs::Vector{T} : Relative flux observations.\neobs::Vector{T} : Uncertainity on relative flux observations.\nflux::Vector{T} : Simulated flux at tobs observation times.\n\nTransit parameters\n\nu_n::Vector{T} : Stellar limbdarkening coefficients.\nk::Vector{T} : Planet-Star radius ratios.\nrstar::Vector{T} : Stellar radius [AU]\n\n\n\n\n\n","category":"type"},{"location":"api/#Constructors","page":"API","title":"Constructors","text":"","category":"section"},{"location":"api/#Photodynamics.Lightcurve-Union{Tuple{T}, Tuple{T, T, Vector{T}, Vector{T}, T}} where T<:Real","page":"API","title":"Photodynamics.Lightcurve","text":"Lightcurve(dt, duration, u_n, k, rstar)\n\nSetup a Lightcurve without having data.\n\nArguments\n\ndt::T : Exposure time [days].\nduration::T : Duration of observations [days].\nu_n::Vector{T} : Stellar limbdarkening coefficients.\nk::Vector{T} : Planet-Star radius ratios.\nrstar::T : Stellar radius [AU] \n\n\n\n\n\n","category":"method"},{"location":"api/#dLightcurve","page":"API","title":"dLightcurve","text":"","category":"section"},{"location":"api/#Photodynamics.dLightcurve","page":"API","title":"Photodynamics.dLightcurve","text":"dLightcurve{T<:Real} <: AbstractLightcurve{T}\n\nA simulated lightcurve and the derivatives of the flux with respect to the model parameters\n\nConstructor\n\nLightcurve(dt, tobs, fobs, eobs, u_n, k, rstar)\n\nArguments\n\ndt::T : Exposure time [days].\ntobs::Vector{T} : Time of observations [days].\nfobs::Vector{T} : Relative flux observations.\neobs::Vector{T} : Uncertainity on relative flux observations.\nu_n::Vector{T} : Stellar limbdarkening coefficients.\nk::Vector{T} : Planet-Star radius ratios.\nrstar::T : Stellar radius [AU] \n\nFields (relevant to the user)\n\nLightcurve parameters\n\ndt::T : Exposure time [days].\ntobs::Vector{T} : Time of observations [days].\nfobs::Vector{T} : Relative flux observations.\neobs::Vector{T} : Uncertainity on relative flux observations.\nflux::Vector{T} : Simulated flux at tobs observation times.\n\nTransit parameters\n\nu_n::Vector{T} : Stellar limbdarkening coefficients.\nk::Vector{T} : Planet-Star radius ratios.\nrstar::Vector{T} : Stellar radius [AU].\n\nJacobians\n\ndfdr::Vector{T} : Derivatives of the flux w.r.t. the stellar radius\ndfdu::Matrix{T} : Derivatives of the flux w.r.t. the limbdarkening coefficients.\ndfdk::Matrix{T} : Derivatives of the flux w.r.t. the radius ratios.\ndfdq0::Matrix{T} : Derivatives of the flux w.r.t. the initial Cartesian coordinates and planet masses\ndfdelements::Matrix{T} : Derivatives of the flux w.r.t. the initial orbital elements and planet masses\n\n\n\n\n\n","category":"type"},{"location":"api/#Constructors-2","page":"API","title":"Constructors","text":"","category":"section"},{"location":"api/#Photodynamics.dLightcurve-Union{Tuple{T}, Tuple{T, T, Vector{T}, Vector{T}, T}} where T<:Real","page":"API","title":"Photodynamics.dLightcurve","text":"dLightcurve(dt, duration, u_n, k, rstar)\n\nSetup a dLightcurve without having data.\n\nArguments\n\ndt::T : Exposure time [days].\nduration::T : Duration of observations [days].\nu_n::Vector{T} : Stellar limbdarkening coefficients.\nk::Vector{T} : Planet-Star radius ratios.\nrstar::T : Stellar radius [AU] \n\n\n\n\n\n","category":"method"},{"location":"tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Pages = [\"basic.md\"]","category":"page"},{"location":"basic/#Basic-Usage","page":"Basic Usage","title":"Basic Usage","text":"","category":"section"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Here we walk through an example of generating a light curve for a 3-body system.","category":"page"},{"location":"basic/#Units","page":"Basic Usage","title":"Units","text":"","category":"section"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"A quick note on units.","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Distance: AU\nTime: Days\nMass: Solar Masses\nAngles: Radians","category":"page"},{"location":"basic/#Transit-Model","page":"Basic Usage","title":"Transit Model","text":"","category":"section"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"We start by defining the stellar/transit parameters:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"using Photodynamics\n\nrstar = 0.00465047 * 0.1192 # Radius of the star (AU)\nk = [0.085, 0.083]  # Planet-star radius ratios\nu_n = [0.28, 0.11]  # Limbdarkening coefficients\nnothing # hide","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Next, we set up the simulated light curve. We assume uniform cadence over length of the observations:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"exp_time = 2 / 60 / 24 # 2 min cadence in days\nobs_duration = 2.0 # 2 days total observations\nlc = Lightcurve(exp_time, obs_duration, u_n, k, rstar)","category":"page"},{"location":"basic/#Dynamical-Model","page":"Basic Usage","title":"Dynamical Model","text":"","category":"section"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"We re-export the NbodyGradient.jl API for initial conditions. See the docs for more details (NbodyGradient.jl docs)","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Start by defining the dynamical model initial conditions:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"star = Elements(m = 1.0) # Mass of the star (solar masses)\nplanet_b = Elements(\n    m = 3e-5,      # Planet mass (solar masses)\n    P = 1.5,       # Period (days)\n    t0 = 0.32,     # Initial time of transit (days from start of simulation)\n    ecosω = 0.03,  # Eccentricity vector component (eccentricity * cos(argument of periastron))\n    I = π/2)       # Inclination (radians; edge-on)\nplanet_c = Elements(\n    m = 6e-5, \n    P = 24,\n    t0 = 0.35,\n    ecosω = 0.02,\n    I = π/2)\n\nt0 = 0.0 # Time of initial conditions \nN = 3 # Number of bodies (or a hierarchy matrix; see NbodyGradient.jl docs)\nic = ElementsIC(t0, N, star, planet_b, planet_c)\nnothing # hide","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Set up the NbodyGradient.jl integrator:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"h = 0.05 # Time step [days]\nintr = Integrator(h, obs_duration)\nnothing # hide ","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Now we integrate the N-body system, record the transit times, and compute the PK20 expansion points about each transit:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"s = State(ic) # Get initial Cartesian coordinates from orbital elements\ntt = TransitTiming(obs_duration, ic) # Pre-allocate transit timing arrays\nts = TransitSeries(obs_duration, ic) # Pre-allocate expansion point arrays\nintr(s, ts, tt) # Dispatch on the desired outputs ","category":"page"},{"location":"basic/#Generating-a-light-curve","page":"Basic Usage","title":"Generating a light curve","text":"","category":"section"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Finally, we combine the photometric and dynamical model output and compute a light curve:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"compute_lightcurve!(lc, ts)\nnothing # hide","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Plot a section of the light curve:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"using Plots\nmask = 0.3 .< lc.tobs .< 0.375\nplot!(lc.tobs[mask], lc.flux[mask] .+ 1, legend=false, marker=true)\nxlabel!(\"Time [Days]\"); ylabel!(\"Relative Flux\")","category":"page"},{"location":"basic/#Modifying-light-curve-parameters","page":"Basic Usage","title":"Modifying light curve parameters","text":"","category":"section"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Since the transit and dynamical models are computed independently, we can modify the light curve parameters without needing to re-compute the N-body integration. ","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"As an example, let's say we want to better resolve the ingress/egress. We can simply decrease the exposure times and recompute the light curve:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"exp_time = exp_time / 20 # reduce the exposure times\nlc = Lightcurve(exp_time, obs_duration, u_n, k, rstar)\ncompute_lightcurve!(lc, ts)\n\nmask = 0.3 .< lc.tobs .< 0.375\nplot(lc.tobs[mask], lc.flux[mask] .+ 1, legend=false, marker=true)\nxlabel!(\"Time [Days]\"); ylabel!(\"Relative Flux\")","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"We can also make changes to the dynamical parameters. Let's change the inclination of one of the planets:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"planet_c = Elements(\n    m = 6e-5, \n    P = 24,\n    t0 = 0.35,\n    ecosω = 0.02,\n    I = π/2+0.002) # Vary the inclination\nic = ElementsIC(t0, N, star, planet_b, planet_c) # Re-initialize\ns = State(ic) \ntt = TransitTiming(obs_duration, ic) \nts = TransitSeries(obs_duration, ic) \nintr(s, ts, tt) \n\n# Plot original and new light curve\nmask = 0.3 .< lc.tobs .< 0.375\nplot(lc.tobs[mask], lc.flux[mask] .+ 1, lw=3, label=\"Original\")\nxlabel!(\"Time [Days]\"); ylabel!(\"Relative Flux\")\n\n# Compute the new light curve and plot\ncompute_lightcurve!(lc, ts)\nplot!(lc.tobs[mask], lc.flux[mask] .+ 1, lw=2, label=\"Modified\")","category":"page"},{"location":"basic/#Multi-band-light-curves","page":"Basic Usage","title":"Multi-band light curves","text":"","category":"section"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"We can model photometry from multiple instruments with different wavelength bands, which will have different limbdarkening coefficients. We use the same N-body model for both:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"u_n_1 = copy(u_n)\nu_n_2 = [0.1, 0.22]\nlc_1 = Lightcurve(exp_time, obs_duration, u_n_1, k, rstar)\nlc_2 = Lightcurve(exp_time, obs_duration, u_n_2, k, rstar)\ncompute_lightcurve!.([lc_1, lc_2], ts) # Vectorize over the light curve objects \n\nmask_1 = 0.3 .< lc_1.tobs .< 0.375\nmask_2 = 0.3 .< lc_2.tobs .< 0.375\nplot(lc_1.tobs[mask_1], lc_1.flux[mask_1] .+ 1, lw=3, label=\"Original\")\nplot!(lc_2.tobs[mask_2], lc_2.flux[mask_2] .+ 1, lw=2, label=\"Modified\")\nxlabel!(\"Time [Days]\"); ylabel!(\"Relative Flux\")","category":"page"},{"location":"basic/#Derivative-Lightcurves","page":"Basic Usage","title":"Derivative Lightcurves","text":"","category":"section"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"To generate derivatives of the flux with respect to the model parameters we first need to get the derivatives for the dynamical model. We simply re-initialize the N-body simulation and run the integration with the grad=true keyword.","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"s = State(ic)\ntt = TransitTiming(obs_duration, ic)\nts = TransitSeries(obs_duration, ic)\nintr(s, ts, tt; grad=true) ","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Then, we get a differentiable light curve (dLightcurve tells compute_lightcurve! to compute derivatives):","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"dlc = dLightcurve(exp_time, obs_duration, u_n, k, rstar)\ncompute_lightcurve!(dlc, ts)","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"We now have the derivatives of the light curve with respect to the initial stellar parameters, masses, and initial Cartesian coordinates.  If we want the derivatives with respect to the orbital elements, we run:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"transform_to_elements!(s, dlc)\nnothing # hide","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Now we visualize the same transits, but plot the derivatives of the flux with respect to the inital mass of the planets. The dLightcurve type has a field dfdelements which is a Matrix of dimension number-of-exposure-times X orbital-element-index. The orbital elements are ordered (P, t0, ecosω, esinω, I, Ω, m). So, to get the mass of planet b, we want orbital element index 14 (for flexibility, the indices include the \"orbital elements of the star\". So, the planets start at index 8). ","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"mask = 0.3 .< dlc.tobs .< 0.375\np1 = plot(dlc.tobs[mask], dlc.dfdelements[mask,14], legend=false, lw=3)\nylabel!(\"dF / dm_b\")\np2 = plot(dlc.tobs[mask], dlc.dfdelements[mask,21], legend=false, lw=3, color=2)\nxlabel!(\"Time [Days]\"); ylabel!(\"dF / dm_c\")\nplot(p1,p2,layout=(2,1))","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"Similarly, we can access the other parameter derivative light curves. Below shows these fields and how the arrays are indexed:","category":"page"},{"location":"basic/","page":"Basic Usage","title":"Basic Usage","text":"dlc.dfdr  # Stellar radius [times]\ndlc.dfdu  # Limbdark coefficients [times X u_n]\ndlc.dfdk  # Radius ratios [times X k]\ndlc.dfdq0 # Cartesian coordinates [times X cartesian coordinates]","category":"page"},{"location":"#Photodynamics","page":"Home","title":"Photodynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: GitHub) (Image: license) (Image: arxiv)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A differentiable photodynamical model for multiplanet transit light curves, described in Langford & Agol 2025. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Photodynamical models are composed of a dynamical model and a transit (i.e. photometric) model. The currently implemented methods are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Dynamical Models:\nNbodyGradient.jl + PK20: Differentiable 4th-order symplectic N-body integrator combined with an implementation of Parviainen & Korth 2020 (PK20). \nTransit Models:\nLimbdark.jl: Differentiable quadratic limbdarkened transits.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First, you'll need to add the package. Using the Julia REPL, type ] to enter the package manager. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To add the latest tagged release, run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Photodynamics","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you'd like to use a developement version of the code, add #branch-name:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Photodynamics#branch-name","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Tutorials page for basic usage.","category":"page"}]
}
